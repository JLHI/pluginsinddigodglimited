# -*- coding: utf-8 -*-

"""
/***************************************************************************
Isochrone_GIS_processing
                                 A QGIS plugin
 Outil de calcul de temps de trajets multimodaux
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-11
        copyright            : (C) 2024 by C.Garcia - JL.Humbert from Inddigo
        email                : c.garcia@inddigo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'C.Garcia - JL.Humbert from Inddigo'
__date__ = '2024-10-11'
__copyright__ = '(C) 2024 by C.Garcia - JL.Humbert from Inddigo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
from qgis.PyQt.QtWidgets import QMessageBox

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingParameterDateTime,
                       QgsProcessingParameterString,
                       QgsProcessingParameterEnum,
                       QgsFeature,
                       QgsWkbTypes,
                       QgsWkbTypes, 
                       QgsField, 
                       QgsFeature,
                       QgsProcessingException,
                       QgsFields,
                       QgsExpressionContextUtils
                       )
from PyQt5.QtCore import QVariant
from .modules.get_pieton import tppietonhere
from .modules.get_bike import tpgvelohere
from .modules.get_car import tpcarhere
from .modules.get_car_trafic import tpcartrafichere
from .modules.get_tc import tptchere

from .utils.utils import sanitize_value, safe_string, saveInDb


# Herekey = None
# # Replace 'variable_name' with the name of your global variable
# variable_name = 'hereapikey'

# # Get the global variable value
# try : 
#     Herekey = QgsExpressionContextUtils.globalScope().variable(variable_name)
# except Exception as e: 
#     print(e)

class isochrone(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    # OUTPUT = 'OUTPUT'
    # INPUT1 = 'INPUT1'
    # INPUT2 = 'INPUT2'
    # ID_FIELD1_JOIN = 'ID_FIELD1_JOIN'
    # ID_FIELD2_JOIN = 'ID_FIELD2_JOIN'
    # FIELD_X_DEST = 'X_D'
    # FIELD_Y_DEST = 'Y_D'
    # DATE_FIELD = 'DATE_FIELD'
    # CKB_DEPART_OU_ARRIVEE = 'CKB_DEPART_OU_ARRIVEE'
    # CHECKBOXES_MODES = 'CHECKBOXES_MODES'
    # DIST_MAX_MARCHE = 'DIST_MAX_MARCHE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """




    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        result = print('hello')
        return result

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Isochrone'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return 'Isochrone'

    def group(self):
        return "Les plugins restreints du pôle DG d\'Inddigo" 

    def groupId(self):
        return 'Les plugins restreints du pôle DG d\'Inddigo'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return isochrone()
