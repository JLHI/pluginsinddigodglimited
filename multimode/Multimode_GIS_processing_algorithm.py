# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Multimode_GIS_processing
                                 A QGIS plugin
 Outil de calcul de temps de trajets multimodaux
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-11
        copyright            : (C) 2024 by C.Garcia - JL.Humbert from Inddigo
        email                : c.garcia@inddigo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'C.Garcia - JL.Humbert from Inddigo'
__date__ = '2024-10-11'
__copyright__ = '(C) 2024 by C.Garcia - JL.Humbert from Inddigo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
from qgis.PyQt.QtWidgets import QMessageBox

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingParameterDateTime,
                       QgsProcessingParameterString,
                       QgsProcessingParameterEnum,
                       QgsFeature,
                       QgsWkbTypes,
                       QgsWkbTypes, 
                       QgsField, 
                       QgsFeature,
                       QgsProcessingException,
                       QgsFields,
                       QgsExpressionContextUtils,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterBoolean,
                       QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform
                       )
from PyQt5.QtCore import QVariant
from .modules.get_pieton import tppietonhere
from .modules.get_bike import tpgvelohere
from .modules.get_car import tpcarhere
from .modules.get_car_trafic import tpcartrafichere
from .modules.get_tc import tptchere
from .modules.get_intermodalite import tpVoitTC, tpVeloTC
from .utils.utils import sanitize_value, safe_string, saveInDb
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject, QgsWkbTypes


Herekey = None
# Replace 'variable_name' with the name of your global variable
variable_name = 'hereapikey'

# Get the global variable value
try : 
    Herekey = QgsExpressionContextUtils.globalScope().variable(variable_name)
except Exception as e: 
    print(e)

class Multimode_GIS_processingAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT1 = 'INPUT1'
    INPUT2 = 'INPUT2'
    ID_FIELD1_JOIN = 'ID_FIELD1_JOIN'
    ID_FIELD2_JOIN = 'ID_FIELD2_JOIN'
    FIELD_X_DEST = 'X_D'
    FIELD_Y_DEST = 'Y_D'
    DATE_FIELD = 'DATE_FIELD'
    CKB_DEPART_OU_ARRIVEE = 'CKB_DEPART_OU_ARRIVEE'
    CHECKBOXES_MODES = 'CHECKBOXES_MODES'
    DIST_MAX_MARCHE = 'DIST_MAX_MARCHE'
    INTERMODALITY_ENABLE = 'INTERMODALITY_ENABLE'
    INTERMODAL_VEHICLE_MODE = 'INTERMODAL_VEHICLE_MODE'


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """



        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT1,
                self.tr('Input layer 1 '),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT2,
                self.tr('Input layer 2 '),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        

        # Menu déroulant pour le champ id origine servant à la jointure
        self.addParameter(
            QgsProcessingParameterField(
                self.ID_FIELD1_JOIN,
                self.tr('Champ ID commun de la couche 1'),
                '',
                parentLayerParameterName=self.INPUT1,  # Lie le champ à la couche d'entrée
                type=QgsProcessingParameterField.Numeric  # Limite la sélection aux champs numériques
            )
        )

        # Menu déroulant pour le champ id dest servant à la jointure
        self.addParameter(
            QgsProcessingParameterField(
                self.ID_FIELD2_JOIN,
                self.tr('Champ ID commun de la couche 2'),
                '',
                parentLayerParameterName=self.INPUT2,  # Lie le champ à la couche d'entrée
                type=QgsProcessingParameterField.Numeric  # Limite la sélection aux champs numériques
            )
        )

        # # Menu déroulant pour le champ des coordonnées Y
        # self.addParameter(
        #     QgsProcessingParameterField(
        #         self.FIELD_X_DEST,
        #         self.tr('Champ X de destination'),
        #         '',
        #         parentLayerParameterName=self.INPUT1,  # Lie le champ à la couche d'entrée
        #         type=QgsProcessingParameterField.Numeric  # Limite la sélection aux champs numériques
        #     )
        # )

        # # Menu déroulant pour le champ des coordonnées Y
        # self.addParameter(
        #     QgsProcessingParameterField(
        #         self.FIELD_Y_DEST,
        #         self.tr('Champ Y de destination'),
        #         '',
        #         parentLayerParameterName=self.INPUT1,  # Lie le champ à la couche d'entrée
        #         type=QgsProcessingParameterField.Numeric  # Limite la sélection aux champs numériques
        #     )
        # )

        # Ajout d'un paramètre de calendrier
        self.addParameter(
            QgsProcessingParameterDateTime(
                self.DATE_FIELD,
                self.tr('Selectionner une date'),
                defaultValue=None,  # Vous pouvez définir une valeur par défaut
                optional=False  # Permet de rendre le paramètre facultatif
            )
        )

        # Paramètre pour une liste de valeurs texte séparées
        self.addParameter(
            QgsProcessingParameterEnum(
                self.CKB_DEPART_OU_ARRIVEE,
                self.tr("Selectionnez si l'heure indiquée est celle de départ ou d'arrivée"),
                options=["Heure de départ", "Heure d'arrivée"],
                allowMultiple=False,  # Ne permet de cocher qu'une seule réponse
                defaultValue= 1    
            )
        )

        # Boutons à cocher simulés avec un Enum à sélection multiple
        self.addParameter(
            QgsProcessingParameterEnum(
                self.CHECKBOXES_MODES,
                self.tr("Selectionnez les modes que vous voulez requêter"),
                options=["Piéton", "Vélo", "Voiture", "Voiture avec trafic", "Transport en commun","Voiture + TC","Vélo + TC"],
                allowMultiple=True,  # Permet de cocher plusieurs options
                defaultValue=[0, 1]  # Option 1 et 2 cochées par défaut
            )
        )
        

        # Paramètre temps de marche maximum
        self.addParameter(
            QgsProcessingParameterString(
                self.DIST_MAX_MARCHE,
                self.tr("Distance max à pied (en mètres)"),
                defaultValue="300"
            )
        )

       

        self.addParameter(
        QgsProcessingParameterFolderDestination(
            'METADATA_OUTPUT',
            self.tr("Dossier de sortie pour la fiche de métadonnées"),
            defaultValue=""  # Vous pouvez définir un dossier par défaut ou laisser vide
        )
    )

        self.addParameter(
            QgsProcessingParameterEnum(
                'GENERATE_METADATA',
                self.tr("Générer une fiche de métadonnées"),
                options=["Non","Oui"],
                allowMultiple=False,
                defaultValue=0  # Par défaut, "Non"
            )
        )

        self.addParameter(
                    QgsProcessingParameterFeatureSink(
                        self.OUTPUT,
                        self.tr('Resultat multimode')
                    )
                )

    if Herekey is None : 
        QMessageBox.warning(None, "Clé manquante", "Attention : La clé Here n'est pas configurée. Vous devez ajouter une variable globale 'hereapikey' et saisir votre api Here, puis recharger le plugin")
    


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source1 = self.parameterAsSource(parameters, self.INPUT1, context)
        source2 = self.parameterAsSource(parameters, self.INPUT2, context)
      
    

        # s_dlng = self.parameterAsString(parameters, self.FIELD_X_DEST, context)
        # s_dlat = self.parameterAsString(parameters, self.FIELD_Y_DEST, context)
        s_id1 = self.parameterAsString(parameters, self.ID_FIELD1_JOIN, context)
        s_id2 = self.parameterAsString(parameters, self.ID_FIELD2_JOIN, context)
        selected_date = self.parameterAsDateTime(parameters, self.DATE_FIELD, context)
        selected_checkboxes = self.parameterAsEnums(parameters, self.CHECKBOXES_MODES, context)
        tps_marche_max = self.parameterAsString(parameters,self.DIST_MAX_MARCHE, context)
        #metadata
        generate_metadata = self.parameterAsEnum(parameters, 'GENERATE_METADATA', context)
        metadata_output = self.parameterAsString(parameters, 'METADATA_OUTPUT', context)
        compte_requete = 0

        if not source1 or not source2:
            raise QgsProcessingException("Impossible de charger les couches d'entrée.")

        # Récupération des champs existants + combinés ces derniers
        fields = QgsFields()  # Initialise un objet QgsFields vide
        for field in source1.fields():  # Appelez la méthode fields() pour obtenir la liste des champs
            fields.append(field)
        
        # for field in source2.fields():  # Ajout des champs de la seconde source
        #     fields.append(field)



        # Ajout des nouveaux champs
        new_fields = [
            QgsField("marche", QVariant.Int),
            QgsField("velo", QVariant.Int),
            QgsField("vae", QVariant.Int),
            QgsField("voiture", QVariant.Int),
            QgsField("voiture_tr", QVariant.Int),
            QgsField("tc_tps", QVariant.String),
            QgsField("tc_h_dep", QVariant.String),
            QgsField("tc_h_arr", QVariant.String),
            QgsField("tc_corr_nb", QVariant.Int),
            QgsField("tc_tps_av", QVariant.Int),
            QgsField("tc_corr", QVariant.String),
            QgsField("tc_voit_tp", QVariant.Int),
            QgsField("tc_velo_tp", QVariant.Int),
        ]

        for new_field in new_fields:
            fields.append(new_field)

        # Création du sink avec les champs combinés
        (sink, dest_id) = self.parameterAsSink(parameters,self.OUTPUT, context, fields, source1.wkbType(), source1.sourceCrs())
        if not sink:
            raise QgsProcessingException("Erreur lors de la création de la couche de sortie.")
        
        selected_index = self.parameterAsEnum(parameters, self.CKB_DEPART_OU_ARRIVEE, context)
        # Transformation des indices de CHECKBOXES_MODES en noms d'options
        options = ["Heure de départ", "Heure d'arrivée"]
        selected_heure = options[selected_index]

        # Transformation des indices de CHECKBOXES_MODES en noms d'options
        options = ["Piéton", "Vélo", "Voiture", "Voiture avec trafic", "Transport en commun","Voiture + TC","Vélo + TC"]
        selected_values = [options[i] for i in selected_checkboxes]
        print("Modes sélectionnés :", selected_values)

        
        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source1.featureCount() if source1.featureCount() else 0
        features1 = list(source1.getFeatures())

        # Conversion de QDateTime en datetime standard de Python
        python_datetime = selected_date.toPyDateTime()

        # Formatage de la date selon le format désiré
        formatted_datetime = python_datetime.strftime("%Y-%m-%dT%H:%M:%S")        

        # Type d'heure à requêter
        if "Heure de départ" in selected_heure:
            type_heure = '&departureTime='
        else:
            type_heure = '&arrivalTime='

        # Indexer les entités de la seconde source par le champ clé
        source2_features = {feat[s_id2]: feat for feat in source2.getFeatures()}

    

        for current, feature1 in enumerate(features1):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            key1 = feature1[s_id1]  # Récupérer la clé de jointure pour la première source
            feature2 = source2_features.get(key1)  # Trouver la correspondance dans la deuxième source

            if feature2:  # Si une correspondance existe
                # Combiner les attributs des deux entités
                combined_attributes = feature1.attributes()

            # Récupère la géométrie
            geometry1 = feature1.geometry()
            geometry2 = feature2.geometry()
            crs_src1 = source1.sourceCrs()  # Récupération du CRS de la couche 1 
            crs_src2 = source2.sourceCrs()  # Récupération du CRS de la couche

            crs_dest = QgsCoordinateReferenceSystem("EPSG:4326")  # Définition du CRS cible
            transform1 = QgsCoordinateTransform(crs_src1, crs_dest, QgsProject.instance())  # Création de la transformation
            transform2 = QgsCoordinateTransform(crs_src2, crs_dest, QgsProject.instance())  # Création de la transformation

            # Vérifie si la géométrie est un point et extrait les coordonnées
                # if geometry1 and geometry1.type() == QgsWkbTypes.PointGeometry:
                #     point1 = geometry1.asPoint()
                #     s_olng, s_olat = point1.x(), point1.y()
                # if geometry2 and geometry2.type() == QgsWkbTypes.PointGeometry:
                #     point2 = geometry2.asPoint()
                #     s_dlng, s_dlat = point2.x(), point2.y()
            if geometry1 and geometry1.type() == QgsWkbTypes.PointGeometry:
                s_olng, s_olat = transform1.transform(geometry1.asPoint()).x(), transform1.transform(geometry1.asPoint()).y()

            if geometry2 and geometry2.type() == QgsWkbTypes.PointGeometry:
                s_dlng, s_dlat = transform2.transform(geometry2.asPoint()).x(), transform2.transform(geometry2.asPoint()).y()
            else:
                feedback.pushInfo(f"Feature {feature1.id()} ou {feature2.id()} n'a pas de géométrie valide. Ignoré.")
                continue

            # Initialiser les valeurs des nouveaux champs
            marche = None
            tempsVeloHere, tempsVaeHere = None, None
            CarTime, CarTimeTrafic = None, None
            total_duration = None
            start_time = None
            end_time = None
            num_transits = None
            time_difference = None
            correspondences = None
            
            # Calculs selon les options sélectionnées
            if "Piéton" in selected_values:
                marche = tppietonhere(s_olng, s_olat, s_dlng, s_dlat, Herekey)
                saveInDb("Piéton") 
                compte_requete = compte_requete+ 1 
                feedback.pushInfo(f"Temps à pied : {marche} minutes")

            if "Vélo" in selected_values:
                tempsVeloHere, tempsVaeHere = tpgvelohere(s_olng, s_olat, s_dlng, s_dlat, Herekey)
                saveInDb("Vélo") 
                compte_requete = compte_requete + 2 
                feedback.pushInfo(f"Temps en vélo : {tempsVeloHere} minutes ; en VAE : {tempsVaeHere} minutes")

            if "Voiture" in selected_values:
                CarTime = tpcarhere(s_olng, s_olat, s_dlng, s_dlat, Herekey)
                saveInDb("Voiture") 
                compte_requete = compte_requete+ 1 
                feedback.pushInfo(f"Temps en voiture : {CarTime} minutes")

            if "Voiture avec trafic" in selected_values:
                CarTimeTrafic = tpcartrafichere(s_olng, s_olat, s_dlng, s_dlat, formatted_datetime, type_heure, Herekey)
                saveInDb("Voiture avec trafic") 
                compte_requete = compte_requete+ 1 
                feedback.pushInfo(f"Temps en voiture avec trafic : {CarTimeTrafic} minutes")

            if "Transport en commun" in selected_values:
                total_duration, start_time, end_time, num_transits, time_difference, correspondences = tptchere(
                    s_olng, s_olat, s_dlng, s_dlat, formatted_datetime, type_heure, tps_marche_max, Herekey
                )
                compte_requete = compte_requete+ 1
                saveInDb("Transport en commun") 
                feedback.pushInfo(f"Temps TC : {total_duration} minutes, départ : {start_time}, arrivée : {end_time}")
            
            if "Voiture + TC" in selected_values:
                voiture_tc_time = tpVoitTC(
                    s_olng, s_olat, s_dlng, s_dlat,type_heure,formatted_datetime, Herekey
                )
                compte_requete = compte_requete+ 1
                saveInDb("Voiture + TC") 
                feedback.pushInfo(f"Temps Voiture + TC : {voiture_tc_time} minutes")

            if "Vélo + TC" in selected_values:
                velo_tc_time = tpVeloTC(
                    s_olng, s_olat, s_dlng, s_dlat,type_heure,formatted_datetime, Herekey
                )
                compte_requete = compte_requete+ 1
                saveInDb("Vélo + TC") 
                feedback.pushInfo(f"Temps Vélo + TC + Vélo: {velo_tc_time} minutes")

            # Ajouter les nouvelles valeurs aux attributs
            enriched_attributes = combined_attributes + [
                sanitize_value(marche, 0),             # Par défaut, 0 si aucune donnée
                sanitize_value(tempsVeloHere, 0),
                sanitize_value(tempsVaeHere, 0),
                sanitize_value(CarTime, 0),
                sanitize_value(CarTimeTrafic, 0),
                sanitize_value(total_duration, 0),
                start_time,
                sanitize_value(end_time, None),
                sanitize_value(num_transits, 0),
                sanitize_value(time_difference, 0),
                safe_string(correspondences),
                sanitize_value(voiture_tc_time, 0),
                sanitize_value(velo_tc_time, 0),

            ]

            # Crée une nouvelle entité avec les attributs enrichis
            new_feature = QgsFeature(fields)
            new_feature.setGeometry(feature1.geometry())
            new_feature.setAttributes(enriched_attributes)

            # Ajoute l'entité au `sink`
            sink.addFeature(new_feature, QgsFeatureSink.FastInsert)

            # Mise à jour de la barre de progression
            feedback.setProgress(int(current * total))

        try :
            if generate_metadata : 
                if not metadata_output:
                    raise QgsProcessingException("Aucun dossier de sortie n'a été spécifié pour la fiche de métadonnées.")
                self.get_metadata(metadata_output,selected_heure,formatted_datetime,source1,source2,tps_marche_max,selected_values,feedback,compte_requete,features1)
                feedback.pushInfo("Fiche éditée avec succès.")

        except Exception as e :
            raise QgsProcessingException(f"Erreur lors de l'édition de la fiche.{e}")
        feedback.pushInfo("Traitement terminé avec succès.")

        return {self.OUTPUT: dest_id}
    
    def get_metadata(self,metadata_output,selected_heure,formatted_datetime,source1,source2,tps_marche_max,selected_values,feedback,compte_requete,features1) : 
        import os, datetime
        current_datetime = datetime.datetime.now()
        metadata_content = []
        # Titre
        metadata_content.append("Fiche de Métadonnées")
        metadata_content.append("=" * 40)

        # Date et heure du traitement
        metadata_content.append(f"Date de traitement : {current_datetime}")
        metadata_content.append(f"Heure d'arrivée ou de départ sélectionnée : {selected_heure}")
        metadata_content.append(f"Date et heure sélectionnées : {formatted_datetime}")
        metadata_content.append("")

        # Sources mobilisées
        metadata_content.append("Sources mobilisées")
        metadata_content.append("-" * 20)
        metadata_content.append(f"Couche d'entrée 1 : {source1.sourceName()}")
        metadata_content.append(f"Couche d'entrée 2 : {source2.sourceName()}")
        metadata_content.append("API utilisée : HERE")
        metadata_content.append("")

        # Paramètres déterminants
        metadata_content.append("Paramètres déterminants")
        metadata_content.append("-" * 20)
        metadata_content.append(f"Distance max à pied pour les transports en commun : {tps_marche_max} m")
        metadata_content.append(f"Modes de transport sélectionnés : {', '.join(selected_values)}")
        metadata_content.append("")

        # Statistiques
        metadata_content.append("Statistiques")
        metadata_content.append("-" * 20)
        metadata_content.append(f"Nombre total d'entités traitées : {len(features1)}")
        metadata_content.append(f"Nombre de requêtes API lancées : {compte_requete}")
        metadata_content.append("")

  

        # Écriture du fichier
        formatted_datetime = current_datetime.strftime("%Y%m%d_%H%M%S")  # Format : YYYYMMDD_HHMMSS

        # Ajoute la date et l'heure au nom du fichier
        metadata_file_name = f"metadata_{formatted_datetime}.txt"
        metadata_file_path = os.path.join(metadata_output, metadata_file_name)
        try:
            with open(metadata_file_path, 'w', encoding='utf-8') as f:
                f.write("\n".join(metadata_content))
            feedback.pushInfo(f"Fiche de métadonnées générée : {metadata_file_path}")
        except Exception as e:
            raise QgsProcessingException(f"Aucun dossier de sortie n'a été spécifié pour la fiche de métadonnées.{str(e)}")

            
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Multimode'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return 'Multimode'

    def group(self):
        return "Les plugins restreints du pôle DG d\'Inddigo" 

    def groupId(self):
        return 'Les plugins restreints du pôle DG d\'Inddigo'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Multimode_GIS_processingAlgorithm()
    
    def shortHelpString(self):
        """
        Retourne le texte d'aide pour l'outil.
        """
        return """
            <h3>Outil Inddigo : Multimode_GIS_processing</h3>
            <p>Ce plugin permet de :</p>
            <ul>
                <li>Calculer les temps de trajet pour différents modes de transport :</li>
                <ul>
                    <li><b>Piéton :</b> Calcul du temps de trajet à pied.</li>
                    <li><b>Vélo :</b> Calcul des temps pour les vélos traditionnels et VAE.</li>
                    <li><b>Voiture :</b> Calcul des temps de trajet en voiture, avec ou sans trafic.</li>
                    <li><b>Transport en commun :</b> Calcul détaillé incluant le temps total, les correspondances et les horaires.</li>
                    <li><b>Voiture + TC :</b> Calcul du temps de trajet en voiture + TC.</li>
                    <li><b>Vélo + TC :</b> Calcul du temps de trajet à vélo + TC.</li>

                </ul>
                <li>Générer une fiche de métadonnées contenant les informations sur les traitements effectués.</li>
            </ul>
            <h4>Paramètres</h4>
            <ul>
                <li><b>Couche d'entrée 1 :</b> La couche contenant les points d'origine.</li>
                <li><b>Couche d'entrée 2 :</b> La couche contenant les points de destination.</li>
                <li><b>Champ ID commun de la couche 1 :</b> Champ utilisé pour la jointure avec la couche 2.</li>
                <li><b>Champ ID commun de la couche 2 :</b> Champ utilisé pour la jointure avec la couche 1.</li>
                <li><b>Date et heure :</b> Paramètre permettant de spécifier la date et l'heure pour le calcul des trajets.</li>
                <li><b>Type d'heure :</b> Spécifie si l'heure fournie correspond à une heure de départ ou d'arrivée.</li>
                <li><b>Modes de transport :</b> Sélectionnez les modes de transport à inclure dans les calculs.</li>
                <li><b>Distance max à pied (pedestrian[maxDistance]):</b> 
                    <p>La distance maximale que l'utilisateur peut parcourir à pied, spécifiée en mètres, à chaque arrêts.</p>
                    <ul>
                        <li><b>Plage :</b> 0 m (aucune marche autorisée) à 6000 m (6 km).</li>
                    </ul>
                </li>
                <li><b>Dossier de sortie pour les métadonnées :</b> Emplacement où générer la fiche de métadonnées (facultatif).</li>
            </ul>
            <p>Le résultat est une couche géographique enrichie avec les temps de trajet calculés pour chaque mode de transport.</p>
            <h4>Sorties</h4>
            <ul>
                <li><b>Couche résultat :</b> La couche résultante contenant les trajets calculés avec les temps pour chaque mode sélectionné.</li>
                <li><b>Fiche de métadonnées :</b> (Optionnelle) Une fiche détaillée des traitements, enregistrée dans le dossier spécifié.</li>
            </ul>
        """